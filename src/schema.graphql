## Add below directive declaration if compilation fails for unknown directive cacheControl
directive @cacheControl(
     maxAge: Int,
     scope: CacheControlScope
) on OBJECT | FIELD_DEFINITION

directive @undocumented on OBJECT | FIELD_DEFINITION

enum CacheControlScope {
     PUBLIC
     PRIVATE
}
##

enum SummaryInterval {
    day
    week
    month
    year
}

enum FacetDataType {
     Category
     Numeric
}

enum Gender {
     M
     F
}

scalar JSON

type FilterSets @cacheControl(maxAge: 604800){
    targetFacets: [String]
    diseaseFacets: [String]
    ligandFacets: [String]
}

type DownloadResult @cacheControl(maxAge: 604800){
     result: Boolean
     data: JSON
     errorDetails: JSON
     sql: String
     warnings: [String]
}

type UpsetResult @cacheControl(maxAge: 604800){
     values: [String]
     count: Int
}

type Xref @cacheControl(maxAge: 604800) {
     source: String!
     name: String!
     value: String
     targets(tdl: String = "", fam: String = ""): [Target]
}

type Prop @cacheControl(maxAge: 604800) {
     name: String!
     value: String!
}

type IntProp @cacheControl(maxAge: 604800) {
     name: String!
     value: Int!
}

type FloatProp @cacheControl(maxAge: 604800) {
     name: String!
     value: Float!
}

type FisherStats @cacheControl(maxAge: 604800) {
    rejected: Boolean
    qValue: Float
    pValue: Float
    oddsRatio: OddsRatio
    statistic: Float
    nullValue: Float
}

type OddsRatio @cacheControl(maxAge: 604800) {
    value: String
    lower95: String
    upper95: String
}

type FacetProp @cacheControl(maxAge: 604800) {
    name: String!
    value: Int!
    stats: FisherStats
    table: ContingencyTable
}

type ContingencyTable @cacheControl(maxAge: 604800) {
    inListHasValue: Int
    outListHasValue: Int
    inListNoValue: Int
    outListNoValue: Int
}

type HSummaryProp @cacheControl(maxAge: 604800) {
     name: String!
     value: Float!
     sources: [String]
}

type TemporalCount @cacheControl(maxAge: 604800) {
     year: Int!
     count: Int!
}

type TemporalScore @cacheControl(maxAge: 604800) {
     year: Int!
     score: Float!
}

type Facet @cacheControl(maxAge: 604800) {
     facet: String!
     modifier: String
     count: Int
     values (skip: Int=0, top: Int=20, name: String, all: Boolean = false): [FacetProp]
     dataType: FacetDataType
     binSize: Float
     sql: String
     single_response: Boolean
     elapsedTime: Float
     sourceExplanation: String
     model: String
}

input IUpsetOptions {
     inGroup: [String]
     outGroup: [String]
}

input IFilterFacet {
     facet: String!
     values: [String]
     upSets: [IUpsetOptions]
}

type UpsetOptions @cacheControl(maxAge: 604800) {
     inGroup: [String]
     outGroup: [String]
}

type FilterFacet @cacheControl(maxAge: 604800) {
     facet: String!
     values: [String]
     upSets: [UpsetOptions]
}

"""Input IRangeFloat: [start, end)"""
input IRangeInt {
     name: String!
     start: Int
     end: Int
}

"""Input IRangeFloat: [start, end) when start & end are specified;
if start is not specified, then < end. Otherwise if end is not specified,
then the range >= start is assumed."""
input IRangeFloat {
     name: String!
     start: Float
     end: Float
}

input IFilter {
     term: String
     facets: [IFilterFacet]
     irange: [IRangeInt]
     frange: [IRangeFloat]
     order: String
     associatedTarget: String
     associatedDisease: String
     associatedLigand: String
     associatedStructure: String
     sequence: String
     similarity: String
     ppiConfidence: Int = 400
     noOptimization: Boolean = false
}

type Filter @cacheControl(maxAge: 604800) {
     term: String
     facets: [FilterFacet]
}

type PantherPath @cacheControl(maxAge: 604800){
     pcid: String!
     name: String!
     parents: [PantherPath]
}

type PantherClass @cacheControl(maxAge: 604800) {
     pcid: String!
     name: String!
     parents: [String]
}

type Pathway @cacheControl(maxAge: 604800) {
     pwid: Int!
     type: String!
     name: String!
     url: String
     sourceID: String
     targetCounts: [IntProp]
     targets(skip: Int=0, top: Int=10, filter: IFilter): [Target]
}

input ITarget {
     tcrdid: Int
     uniprot: String
     geneid: Int
     sym: String
     stringid: String
}

type PubMed @cacheControl(maxAge: 604800) {
     pmid: String!
     title: String
     journal: String
     date: String
     year: Int
     abstract: String
     targetCounts: [IntProp]
     targets(skip: Int=0, top: Int=10, filter: IFilter): [Target]
}

type GeneRIF @cacheControl(maxAge: 604800) {
     rifid: Int!
     text: String
     target: Target!
     date: String
     pubs: [PubMed]
}

type GeneRIFObject @cacheControl(maxAge: 604800) {
     rifid: Int!
     gene_id: [Int]
     text: String
     date: String
}

type PublicationObject @cacheControl(maxAge: 604800) {
     pmid: Int!
     gene_id: [Int]
     title: String!
     journal: String
     date: String
     authors: String
     abstract: String
     fetch_date: String
     generifs: [GeneRIFObject]
}

"""Ortholog"""
type Ortholog @cacheControl(maxAge: 604800) {
     orid: Int!
     species: String!
     sym: String
     mod_url: String
     name: String!
     dbid: String
     geneid: Int
     source: [String]
     diseases: [OrthologDisease]
}

type OrthologDisease @cacheControl(maxAge: 604800) {
     ordid: Int!
     score: Float!
     diseases: [Disease]
}

"""Disease entity"""
type Disease @cacheControl(maxAge: 604800) {
     name: String!
     associationCount: Int!
     gard_rare: Boolean
     directAssociationCount: Int
     mondoID: String
     datasource_count: Int
     associations (skip: Int=0, top: Int=10): [DiseaseAssociation]
     uniprotDescription: String
     doDescription: String
     mondoDescription: String
     dids: [DiseaseID]
     targetCounts: [IntProp]
     targets (skip: Int=0, top: Int=10, filter: IFilter): [Target]
     parents: [Disease]
     children: [Disease]
     tinx: [TINXTarget]
     gwasAnalytics: GwasDiseaseAnalytics
     mondoEquivalents: [MondoEquivalent]
     predictions: [JSON]
}

type MondoEquivalent @cacheControl(maxAge: 604800) {
    id: String!
    name: String
}

type DiseaseID @cacheControl(maxAge: 604800){
     id: String!
     dataSources: [String]
     doName: String
     doDefinition: String
}

type DiseaseAssociation @cacheControl(maxAge: 604800) {
     disassid: Int!
     type: String!
     name: String!
     did: String
     description: String
     zscore: Float
     evidence: String
     conf: Float
     reference: String
     drug: String
     log2foldchange: Float
     pvalue: Float
     score: Float
     source: String
}

"""Target relationships such as PPI"""
type TargetNeighbor @cacheControl(maxAge: 604800) {
     nid: Int!
     type: String!
     props: [Prop]
     target: Target!
}

"""LocSigDB: database of protein localization signals"""
type LocSig @cacheControl(maxAge: 604800) {
     locid: Int!
     location: String!
     signal: String!
     pubs: [PubMed]
}

"""LINCS: Library of Integrated Network-Based Cellular Signatures"""
type LINCS @cacheControl(maxAge: 604800) {
     lncsid: Int!
     cellid: String!
     zscore: Float
     smiles: String
     targets (skip: Int=0, top: Int=10, filter: IFilter): [Target]
}

type Uberon @cacheControl(maxAge: 604800) {
     uid: String!
     name: String!
     def: String
     comment: String
     ancestors: [Uberon]
}

"""Expression entity"""
type Expression @cacheControl(maxAge: 604800) {
     expid: Int!
     type: String!
     tissue: String!
     """quality value: enum('Not detected','Low','Medium','High')"""
     qual: String
     value: String
     evidence: String
     zscore: Float
     conf: Float
     """BrendaTissue ontology"""
     btoid: String
     uberon: Uberon
     pub: PubMed
     url: String
     source_rank: Float

     cellid: String @deprecated (reason: "No data sources return this field anymore.")
}

type GTEXExpression @cacheControl(maxAge: 604800) {
     tissue: String!
     tpm: Float!
     tpm_rank: Float!
     tpm_male: Float
     tpm_male_rank: Float
     tpm_female: Float
     tpm_female_rank: Float
     log2foldchange: Float
     uberon: Uberon

     gender: Gender @deprecated (reason: "gender is deprecated. Now all data for a tissue is in one result, not in separate results for male and female")
     tpm_rank_bysex: Float @deprecated (reason: "tpm_rank_by_sex is deprecated. Use tpm_male_rank and tpm_female_rank instead")
     tpm_level: String @deprecated (reason: "tpm_level is deprecated. You can categorize the TPM level yourself based on tpm_rank (i.e. tpm_rank < 0.25 => Low)")
     tpm_level_bysex: Float @deprecated (reason: "tpm_level is deprecated. You can categorize the TPM levels yourself based on tpm_male_rank and tpm_female_rank (i.e. tpm_male_rank < 0.25 => Low)")
     tpm_f: Float @deprecated (reason: "tpm_f is deprecated. Use tpm_female instead")
     tpm_m: Float @deprecated (reason: "tpm_m is deprecated. Use tpm_male instead")
     tau: Float @deprecated (reason: "tau_bysex is deprecated. Use target.tissueSpecificity instead")
     tau_bysex: Float @deprecated (reason: "tau_bysex is deprecated. Use target.tissueSpecificity instead")
}

type GO @cacheControl(maxAge: 604800) {
     goid: String!
     """type: 'C' - component, 'F' - function, 'P' - process"""
     type: String!
     term: String!
     evidence: String
     goeco: String
     assigned_by: String
     explanation: String
}

type MIM @cacheControl(maxAge: 604800) {
     mimid: Int!
     term: String!
}

"""GWAS catalog data"""
type GWAS @cacheControl(maxAge: 604800) {
     gwasid: Int!
     trait: String!
     snps: [Prop]
     pvalue: Float
     pub: PubMed
}

"""Harmonizome"""
type Harmonizome @cacheControl(maxAge: 604800) {
     target: Target!
     count: Int
     attrs: [GeneAttribute]
     """which must be one of 'type', 'group', or 'category'"""
     summary (which: String="type"): [HSummaryProp]
}

type GeneAttribute @cacheControl(maxAge: 604800) {
     gaid: Int!
     gat: GeneAttributeType!
     count: Int!
     cdf: Float!
}

"""Gene attribute type associated with harmonizome entry"""
type GeneAttributeType @cacheControl(maxAge: 604800) {
     gatid: Int!
     name: String!
     association: String
     description: String
     """resource_group in table gene_attribute_type"""
     category: String
     group: String
     type: String
     pubs: [PubMed]
     url: String
}

"""Ligand"""
type Ligand @cacheControl(maxAge: 604800) {
     """identify associated with this ligand; for small molecule it's the lychi hash"""
     ligid: String
     """recognized name for the ligand"""
     name: String
     """nlm description of the drug"""
     description: String
     """is ligand an approved drug?"""
     isdrug: Boolean
     synonyms: [Prop]
     """molecular structure of ligand if small molecule"""
     smiles: String
     """Activity count"""
     actcnt: Int
     targetCount: Int
     activities (all: Boolean = true): [LigandActivity]
     similarity: Float
     predictions: [JSON]
}

type LigandActivity @cacheControl(maxAge: 604800) {
     actid: Int!
     """activity type; e.g., IC50"""
     type: String
     value: Float
     """mode of action; e.g., INHIBITOR"""
     moa: String
     reference: String
     ligand: Ligand!
     target: Target!
     pubs: [PubMed]
}

type DiseaseOntology @cacheControl(maxAge: 604800) {
     doid: String
     name: String
     def: String
     parents: [DiseaseOntology]
     children: [DiseaseOntology]
}

type DTO @cacheControl(maxAge: 604800) {
     dtoid: String!
     name: String!
     parent: DTO
     children: [DTO]
}

type TINXDisease @cacheControl(maxAge: 604800) {
     """Disease novelty"""
     novelty: Float
     """Importance of disease-target combination"""
     score: Float
     disease: DiseaseOntology
}

type TINXTargetDetails @cacheControl(maxAge: 604800) {
     """Disease details of the reported association"""
     doid: String
     diseaseName: String
     """Importance of disease-target combination"""
     importance: Float
}

type TINXTarget @cacheControl(maxAge: 604800) {
     targetID: Int!
     targetName: String
     """Target novelty"""
     novelty: Float
     tdl: String
     details: [TINXTargetDetails]
}

type SimilarityDetails @cacheControl(maxAge: 604800){
     jaccard: Float
     overlap: Int
     baseSize: Int
     testSize: Int
     commonOptions: [String]
}


type VariantInfo @cacheControl(maxAge: 604800){
     aa: String
     bits: Float
}

type SeqVariantInfo @cacheControl(maxAge: 604800){
     startResidue: Int
     residue_info: [[VariantInfo]]
}

type SeqAnnotationInfo @cacheControl(maxAge: 604800){
     startResidue: Int
     endResidue: Int
     type: String
     name: String
}

type DRGCResource @cacheControl(maxAge: 604800){
     resourceType: String
     detailBlob: JSON
}

type LinkInfo @cacheControl(maxAge: 604800) {
     sourceName: String
     description: String
     url: String
}

type SharedPathwayDetails @cacheControl(maxAge: 604800) {
    tClinTarget: Target
    distance: Int
    sharedPathways: [Pathway]
}

type NearestTclinDetails @cacheControl(maxAge: 604800) {
    upstream: [SharedPathwayDetails]
    downstream: [SharedPathwayDetails]
}

type WordCountProp @cacheControl(maxAge: 604800) {
     name: String!
     count: Int!
     oddsRatio: Float!
     pValue: Float!
}

"""Target entity"""
type Target @cacheControl(maxAge: 604800){
     abstractWordCounts(top: Int = 100): [WordCountProp]
     dataVersions(keys: [String!]): [DataVersionResponse]
     nearestTclin: NearestTclinDetails
     similarity: SimilarityDetails
     sequence_variants: SeqVariantInfo
     sequence_annotations: [SeqAnnotationInfo]
     drgc_resources: [DRGCResource]
     affiliate_links: [LinkInfo]

     """Internal TCRD ID; should not be used externally!"""
     tcrdid: Int!
     """UniProt Accession"""
     uniprot: String!
     """Target name"""
     name: String!
     """Gene symbol"""
     sym: String
     """Preferred Symbol - either uniprot, or gene symbol, depending on if gene symbol is null, or is not unique"""
     preferredSymbol: String
     """Summary of gene/protein"""
     description: String
     """Target development leve"""
     tdl: String
     """Target family"""
     fam: String
     seq: String!
     """Target novelty score"""
     novelty: Float

     """DTO hierarchy if avaiable"""
     dto: [DTO]

     """Properties and cross references"""
     props(name: String = ""): [Prop]
     synonyms(name: String = ""): [Prop]
     xrefs(source: String = ""): [Xref]

     """Publications associated with this protein"""
     pubCount: Int @deprecated(reason: "pubCount is deprecated. use publicationCount instead.")
     pubs(skip: Int = 0, top: Int = 10, term: String = ""): [PubMed] @deprecated(reason: "pubs is deprecated. use publications instead.")

     """GeneRIF information"""
     generifs(skip: Int = 0, top: Int = 10, term: String=""): [GeneRIF] @deprecated(reason: "Target.generifs is deprecated. use publications.generifs instead.")

     """Combined publications and generifs information"""
     generifCount: Int
     publicationCount: Int
     publications(skip: Int=0, top: Int=5): [PublicationObject]!

     """Protein-protein interaction"""
     ppiCounts(filter: IFilter) : [IntProp]
     ppis(skip: Int = 0, top: Int = 10, filter: IFilter): [TargetNeighbor]

     """Disease associations"""
     diseaseCounts: [IntProp]
     diseases(skip: Int=0, top: Int=10, type: [String]=[]): [Disease]

     """Patent information"""
     patentCounts: [TemporalCount]
     pubTatorScores: [TemporalScore]
     pubmedScores: [TemporalScore]

     """Panther protein ontology"""
     pantherPaths: [PantherPath]
     pantherClasses: [PantherClass]

     """Pathway information"""
     pathwayCounts: [IntProp]
     pathways(skip: Int=0, top: Int=10, type: [String]=[], excludeType: [String]=[], getTopForEachType: Boolean = false): [Pathway]

     """Protein signal localization"""
     locsigs: [LocSig]

     """LINCS: Library of Integrated Network-Based Cellular Signatures"""
     lincs (skip: Int=0, top: Int=10, cellid: [String]=[]): [LINCS]
     lincsCounts: [IntProp]

     """Target neighbors expressed as distance in KEGG pathway"""
     kegg(skip: Int=0, top: Int=10, filter: IFilter): [TargetNeighbor]

     """Tissue expression"""
     expressionCounts: [IntProp]
     expressions(skip: Int=0, top: Int=10, filter: IFilter): [Expression]
     expressionTree: JSON
     diseaseTree: JSON
     tinxTree: JSON
     gtex: [GTEXExpression]
     tissueSpecificity: [FloatProp]

     """Ortholog protein"""
     orthologCounts: [IntProp]
     orthologs(skip: Int=0, top: Int=5, filter: IFilter): [Ortholog]

     """GWAS catalog"""
     gwasCounts: [IntProp]
     gwas(skip: Int=0, top: Int=10, filter: IFilter): [GWAS]

     gwasAnalytics: GwasTargetAnalytics

     """GO terms"""
     goCounts: [IntProp]
     go(skip: Int=0, top: Int=20, filter: IFilter): [GO]

     """MIM terms"""
     mimCount: Int
     mim: [MIM]

     """Harmonizome data"""
     harmonizome: Harmonizome

     """Ligand activity data"""
     ligandCounts: [IntProp]
     ligands(skip: Int=0, top: Int=10, isdrug: Boolean = false,
          filter: IFilter): [Ligand]

     """TINX"""
     tinxCount: Int
     tinx(skip: Int=0, top: Int, filter: IFilter): [TINXDisease]

     ppiTargetInteractionDetails: InteractionDetails
     diseaseAssociationDetails: [AssociationDetails]
     ligandAssociationDetails: LigandAssocDetails
     targetPredictionDetails: TargetPredictionDetails
     sequenceSimilarityDetails: SequenceSimilarityDetails

     interactingViruses: [VirusDetails]

     dataSources: [String]

     facetValueCount(facetName: String!): Int
     facetValues(facetName: String!, skip: Int=0, top: Int=10): [String]

     predictions: [JSON]
}

type GwasTargetAnalytics @cacheControl(maxAge: 604800) {
     associations: [GwasTargetAssociation]
}

type GwasTargetAssociation @cacheControl(maxAge: 604800) {
     ensgID: String
     traitCountForGene: Int
     studyCountForGene: Int
     trait: String
     efoID: String
     studyCountForAssoc: Int
     snpCount: Int
     wSnpCount: Float
     geneCountForTrait: Int
     studyCountForTrait: Int
     medianPvalue: Float
     medianOddsRatio: Float
     betaCount: Int
     meanStudyN: Float
     rcras: Float
     meanRank: Float
     meanRankScore: Float
     diseaseName: String
}

type GwasDiseaseAnalytics @cacheControl(maxAge: 604800) {
     efoID: String
     trait: String
     geneCount: Int
     studyCount: Int
     associations: [GwasDiseaseAssociation]
}

type GwasDiseaseAssociation @cacheControl(maxAge: 604800) {
     target: Target
     ensgID: String
     studyCount: Int
     snpCount: Int
     wSnpCount: Float
     traitCountForGene: Int
     studyCountForGene: Int
     medianPvalue: Float
     medianOddsRatio: Float
     betaCount: Int
     meanStudyN: Float
     rcras: Float
     meanRank: Float
     meanRankScore: Float
}

type SimilarTargetResult @cacheControl(maxAge: 604800) {
     protein_id: Int
     sym: String
     overlap: Int
     baseSize: Int
     testSize: Int
     jaccard:  Float
}

type ViralInteractionDetails @cacheControl(maxAge: 604800) {
     finalLR: Float!
     protein_name: String!
     protein_ncbi: String
     dataSource: String
     pdbIDs: [String]
}

type VirusDetails @cacheControl(maxAge: 604800){
     taxonomyID: String!
     name: String!
     nucleic1: String
     nucleic2: String
     order: String
     family: String
     subfamily: String
     genus: String
     species: String
     interactionDetails: [ViralInteractionDetails]
}

type AssociationDetails @cacheControl(maxAge: 604800){
     name: String
     dataType: String
     evidence: String
     zscore: Float
     conf: Float
     reference: String
     drug_name: String
     log2foldchange: Float
     pvalue: Float
     score: Float
     source: String
     O2S: Float
     S2O: Float
}

type LigandAssocDetails @cacheControl(maxAge: 604800){
     actVals: String
     avgActVal: Float
     modeOfAction: String
}

type SequenceSimilarityDetails @cacheControl(maxAge: 604800) {
    uniprot: String
    sym: String
    preferredSymbol: String
    pident: Float
    evalue : Float
    bitscore: Int
    qcovs: Float
    alignments: [SequenceAlignments]
}

type SequenceAlignments @cacheControl(maxAge: 604800) {
    sseqid: String
    pident: Float
    length : Int
    mismatch: Int
    gapopen: Int
    qstart: Int
    qend: Int
    sstart: Int
    send: Int
    evalue : Float
    bitscore: Int
    qseq: String
    sseq: String
}

type TargetPredictionDetails @cacheControl(maxAge: 604800) {
     similarity: Float
     result: Float
     training_smiles: String
     training_activity: String
     model_name: String
     target_chembl_id: String
}

type InteractionDetails @cacheControl(maxAge: 604800){
     ppitypes: String
     score: Float
     interaction_type: String
     evidence: String
     p_ni: Float
     p_int: Float
     p_wrong: Float
}

type TargetResult @cacheControl(maxAge: 604800){
     filter: Filter
     count: Int
     facets (include: [String], exclude: [String], enrichFacets: Boolean = false): [Facet]
     targets(skip: Int=0, top: Int=10): [Target]
     similarityTarget: Target
}

type SuggestionResults @cacheControl(maxAge: 604800){
     value: String
     categories: [SuggestionCategory]
}

type SuggestionCategory @cacheControl(maxAge: 604800){
     category: String
     reference_id: String
}

type DiseaseResult @cacheControl(maxAge: 604800) {
     filter: Filter
     count: Int
     facets (include: [String], exclude: [String], enrichFacets: Boolean = false): [Facet]
     diseases(skip: Int=0, top: Int=10): [Disease]
}

type LigandResult @cacheControl(maxAge: 604800) {
     filter: Filter
     count: Int
     facets (include: [String], exclude: [String], enrichFacets: Boolean = false): [Facet]
     ligands(skip: Int=0, top: Int=10): [Ligand]
}

type PubResult @cacheControl(maxAge: 604800) {
     filter: Filter
     count: Int
     facets (include: [String], exclude: [String]): [Facet]
     pubs(skip: Int=0, top: Int=10): [PubMed]
}

type OrthologResult @cacheControl(maxAge: 604800) {
     filter: Filter
     count: Int
     facets (include: [String], exclude: [String]): [Facet]
     orthologs(skip: Int=0, top: Int=10): [Ortholog]
}

type Result @cacheControl(maxAge: 604800) {
     targetResult: TargetResult
     diseaseResult: DiseaseResult
     ligandResult: LigandResult
     pubResult: PubResult
     orthologResult: OrthologResult
}

type DataSourceCount @cacheControl(maxAge: 604800){
     dataSource: String
     url: String
     license: String
     licenseURL: String
     targetCount: Int
     diseaseCount: Int
     ligandCount: Int
}

type PharosConfiguration @cacheControl(maxAge: 604800){
     downloadLists (modelName: String,
          associatedModelName: String,
          similarityQuery: Boolean = false,
          associatedLigand: String = "",
          associatedSmiles: String = "",
          associatedTarget: String = ""
          sequence: String = ""): [FieldList]
}

type FieldList @cacheControl(maxAge: 604800){
     listName: String
     field: [FieldDetails]
}

type FieldDetails @cacheControl(maxAge: 604800){
     order: Int
     name: String
     description: String
     schema: String
     table: String
     column: String
     alias: String
     select: String
     where_clause: String
     group_method: String
     dataType: String
     binSize: String
     log: String
     single_response: Boolean
     default: Boolean
}

type MutationSuccess @undocumented{
    success: Boolean!
    message: String
}

type Mutation @undocumented{
    trackFeature(user: String!, feature: String!, detail1: String, detail2: String, detail3: String): MutationSuccess! @undocumented
}

type DataFileDetails @cacheControl(maxAge: 604800) {
    key: String!
    file: String!
    version: String
    releaseDate: String
    downloadDate: String
}

type DataSourceInfo @cacheControl(maxAge: 604800) {
    name: String!
    description: String
    url: String
    license: String
    licenseURL: String
    citation: String
    files: [DataFileDetails!]
}

type DataVersionResponse @cacheControl(maxAge: 604800) {
    key: String!
    dataSources: [DataSourceInfo!]
}

type Query @cacheControl(maxAge: 604800){
     configuration: PharosConfiguration
     download(model: String!, fields: [String!], sqlOnly: Boolean = true, skip: Int, top: Int, filter: IFilter, batch: [String]): DownloadResult

     upset(model: String!, facetName: String!, values: [String!], filter: IFilter, batch: [String]): [UpsetResult]

     autocomplete(name: String): [SuggestionResults]

     dataSourceCounts: [DataSourceCount]

     targetFacets: [String!] @cacheControl(maxAge: 604800)
     targets(skip: Int=0, top: Int=10, facets: [String!], filter: IFilter, targets: [String]): TargetResult
     target(q: ITarget): Target

     disease(name: String): Disease
     diseases(skip: Int = 0, top: Int = 10, facets: [String!], filter: IFilter, diseases: [String]): DiseaseResult
     diseaseOntology(doid: String, name: String): [DiseaseOntology]
     doTree: [DiseaseOntology]

     dto: [DTO]
     dtoNode(dtoid: String, name: String): [DTO]

"""
Use the ligid parameter to find specific ligands. Use a prefix to note which id type you have if there is a danger of
collision. Available prefixes are: "CID:" for PubChem IDs, "DC:" for DrugCentral IDs, "G2P:" for Guide to Pharmacology IDs,
"UNII:" for UNIIs, "name" for the compound name, and "LYCHI:" for LyCHI layer 4. Prefixes are case insensitive.
"""
     ligand(ligid: String): Ligand
     ligands(skip: Int=0, top: Int=10, facets: [String!], filter: IFilter, ligands: [String]): LigandResult

     pubCount(term: String = ""): Int
     pubmed(pmid: Int!): PubMed
     pubs(skip: Int=0, top: Int=10, term: String!): PubResult

     orthologCounts: [IntProp]
     orthologs(skip: Int=0, top: Int=10, filter: IFilter): OrthologResult

     search(term: String!, facets: [String!]): Result
     batch(targets: [String], ligands: [String],
          diseases:[String], filter: IFilter): Result
     xref(source: String!, value: String!): Xref

     normalizableFilters: FilterSets

     filterSearch(term: String) : [Facet]

     listCross(model: String!, crossModel: String!, filter: IFilter, batch: [String]): JSON
     listCrossDetails(model: String!, crossModel: String!, filter: IFilter, batch: [String], modelID: String, crossModelID: String): JSON

     usageData(interval: SummaryInterval!): JSON

     getSequenceAlignments(sequence: String!, filter: IFilter, batch: [String]): [SequenceSimilarityDetails]

     hierarchicalFilters: FilterSets
     filterHierarchy(model: String!, facetName: String!, filter: IFilter, batch: [String]): JSON

     getAPIMetadata(url: String!, pageInfo: JSON!): JSON @cacheControl(maxAge: 0)
     getAPIResults(url: String!, pageInfo: JSON!): JSON @cacheControl(maxAge: 0)
}
